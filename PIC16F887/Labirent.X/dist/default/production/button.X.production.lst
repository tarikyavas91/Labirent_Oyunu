

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 02 16:44:41 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Version 2.40
    15                           ; Generated 17/11/2021 GMT
    16                           ; 
    17                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0000                     	;# 
    50     0001                     	;# 
    51     0002                     	;# 
    52     0003                     	;# 
    53     0004                     	;# 
    54     0005                     	;# 
    55     0006                     	;# 
    56     0007                     	;# 
    57     0008                     	;# 
    58     0009                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000D                     	;# 
    63     000E                     	;# 
    64     000E                     	;# 
    65     000F                     	;# 
    66     0010                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0013                     	;# 
    70     0014                     	;# 
    71     0015                     	;# 
    72     0015                     	;# 
    73     0016                     	;# 
    74     0017                     	;# 
    75     0018                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001B                     	;# 
    80     001C                     	;# 
    81     001D                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     0081                     	;# 
    85     0085                     	;# 
    86     0086                     	;# 
    87     0087                     	;# 
    88     0088                     	;# 
    89     0089                     	;# 
    90     008C                     	;# 
    91     008D                     	;# 
    92     008E                     	;# 
    93     008F                     	;# 
    94     0090                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0093                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0095                     	;# 
   102     0096                     	;# 
   103     0097                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009A                     	;# 
   107     009B                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     0105                     	;# 
   113     0107                     	;# 
   114     0108                     	;# 
   115     0109                     	;# 
   116     010C                     	;# 
   117     010C                     	;# 
   118     010D                     	;# 
   119     010E                     	;# 
   120     010F                     	;# 
   121     0185                     	;# 
   122     0187                     	;# 
   123     0188                     	;# 
   124     0189                     	;# 
   125     018C                     	;# 
   126     018D                     	;# 
   127     0000                     	;# 
   128     0001                     	;# 
   129     0002                     	;# 
   130     0003                     	;# 
   131     0004                     	;# 
   132     0005                     	;# 
   133     0006                     	;# 
   134     0007                     	;# 
   135     0008                     	;# 
   136     0009                     	;# 
   137     000A                     	;# 
   138     000B                     	;# 
   139     000C                     	;# 
   140     000D                     	;# 
   141     000E                     	;# 
   142     000E                     	;# 
   143     000F                     	;# 
   144     0010                     	;# 
   145     0011                     	;# 
   146     0012                     	;# 
   147     0013                     	;# 
   148     0014                     	;# 
   149     0015                     	;# 
   150     0015                     	;# 
   151     0016                     	;# 
   152     0017                     	;# 
   153     0018                     	;# 
   154     0019                     	;# 
   155     001A                     	;# 
   156     001B                     	;# 
   157     001B                     	;# 
   158     001C                     	;# 
   159     001D                     	;# 
   160     001E                     	;# 
   161     001F                     	;# 
   162     0081                     	;# 
   163     0085                     	;# 
   164     0086                     	;# 
   165     0087                     	;# 
   166     0088                     	;# 
   167     0089                     	;# 
   168     008C                     	;# 
   169     008D                     	;# 
   170     008E                     	;# 
   171     008F                     	;# 
   172     0090                     	;# 
   173     0091                     	;# 
   174     0092                     	;# 
   175     0093                     	;# 
   176     0093                     	;# 
   177     0093                     	;# 
   178     0094                     	;# 
   179     0095                     	;# 
   180     0096                     	;# 
   181     0097                     	;# 
   182     0098                     	;# 
   183     0099                     	;# 
   184     009A                     	;# 
   185     009B                     	;# 
   186     009C                     	;# 
   187     009D                     	;# 
   188     009E                     	;# 
   189     009F                     	;# 
   190     0105                     	;# 
   191     0107                     	;# 
   192     0108                     	;# 
   193     0109                     	;# 
   194     010C                     	;# 
   195     010C                     	;# 
   196     010D                     	;# 
   197     010E                     	;# 
   198     010F                     	;# 
   199     0185                     	;# 
   200     0187                     	;# 
   201     0188                     	;# 
   202     0189                     	;# 
   203     018C                     	;# 
   204     018D                     	;# 
   205                           
   206                           	psect	idataCOMMON
   207     0717                     __pidataCOMMON:
   208                           
   209                           ;initializer for _y_motor
   210     0717  345A               	retlw	90
   211                           
   212                           ;initializer for _x_motor
   213     0718  345A               	retlw	90
   214                           
   215                           	psect	strings
   216     0003                     __pstrings:
   217     0003                     stringtab:
   218     0003                     __stringtab:
   219     0003                     stringcode:	
   220                           ;	String table - string pointers are 1 byte each
   221                           
   222     0003                     stringdir:
   223     0003  3000               	movlw	high stringdir
   224     0004  008A               	movwf	10
   225     0005  0804               	movf	4,w
   226     0006  0A84               	incf	4,f
   227     0007  0782               	addwf	2,f
   228     0008                     __stringbase:
   229     0008  3400               	retlw	0
   230     0009                     __end_of__stringtab:
   231     0009                     _min_deger:
   232     0009  341E               	retlw	30
   233     000A                     __end_of_min_deger:
   234     000A                     _max_deger:
   235     000A  3496               	retlw	150
   236     000B                     __end_of_max_deger:
   237     0006                     _PORTB	set	6
   238     001D                     _CCP2CON	set	29
   239     001B                     _CCPR2L	set	27
   240     0017                     _CCP1CON	set	23
   241     0015                     _CCPR1L	set	21
   242     0012                     _T2CON	set	18
   243     0033                     _RB3	set	51
   244     0032                     _RB2	set	50
   245     0031                     _RB1	set	49
   246     0030                     _RB0	set	48
   247     0086                     _TRISB	set	134
   248     0092                     _PR2	set	146
   249     0087                     _TRISC	set	135
   250     0189                     _ANSELH	set	393
   251                           
   252                           	psect	cinit
   253     07F0                     start_initialization:	
   254                           ; #config settings
   255                           
   256     07F0                     __initialization:
   257                           
   258                           ; Initialize objects allocated to COMMON
   259     07F0  120A  118A  2717  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   260     07F5  00F3               	movwf	__pdataCOMMON& (0+127)
   261     07F6  120A  118A  2718  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   262     07FB  00F4               	movwf	(__pdataCOMMON+1)& (0+127)
   263     07FC                     end_of_initialization:	
   264                           ;End of C runtime variable initialization code
   265                           
   266     07FC                     __end_of__initialization:
   267     07FC  0183               	clrf	3
   268     07FD  120A  118A  2F19   	ljmp	_main	;jump to C main() function
   269                           
   270                           	psect	dataCOMMON
   271     0073                     __pdataCOMMON:
   272     0073                     _y_motor:
   273     0073                     	ds	1
   274     0074                     _x_motor:
   275     0074                     	ds	1
   276                           
   277                           	psect	cstackCOMMON
   278     0070                     __pcstackCOMMON:
   279     0070                     ?_main:
   280     0070                     ??_main:	
   281                           ; 1 bytes @ 0x0
   282                           
   283                           
   284                           ; 1 bytes @ 0x0
   285     0070                     	ds	3
   286                           
   287                           	psect	maintext
   288     0719                     __pmaintext:	
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 39 in file "newmain.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;		None
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		wreg, status,2, status,0
   303 ;; Tracked objects:
   304 ;;		On entry : B00/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   308 ;;      Params:         0       0       0       0       0
   309 ;;      Locals:         0       0       0       0       0
   310 ;;      Temps:          3       0       0       0       0
   311 ;;      Totals:         3       0       0       0       0
   312 ;;Total ram usage:        3 bytes
   313 ;; This function calls:
   314 ;;		Nothing
   315 ;; This function is called by:
   316 ;;		Startup code after reset
   317 ;; This function uses a non-reentrant model
   318 ;;
   319                           
   320     0719                     _main:	
   321                           ;psect for function _main
   322                           
   323     0719                     l671:	
   324                           ;incstack = 0
   325                           ; Regs used in _main: [wreg+status,2+status,0]
   326                           
   327                           
   328                           ;newmain.c: 40:  TRISC = (1<<3)|(1<<4) ;
   329     0719  3018               	movlw	24
   330     071A  1683               	bsf	3,5	;RP0=1, select bank1
   331     071B  1303               	bcf	3,6	;RP1=0, select bank1
   332     071C  0087               	movwf	7	;volatile
   333                           
   334                           ;newmain.c: 42:   PR2 = 0xFA;
   335     071D  30FA               	movlw	250
   336     071E  0092               	movwf	18	;volatile
   337     071F                     l673:
   338                           
   339                           ;newmain.c: 43:   T2CON |= (1<<2)|(1<<1);
   340     071F  3006               	movlw	6
   341     0720  00F0               	movwf	??_main
   342     0721  0870               	movf	??_main,w
   343     0722  1283               	bcf	3,5	;RP0=0, select bank0
   344     0723  1303               	bcf	3,6	;RP1=0, select bank0
   345     0724  0492               	iorwf	18,f	;volatile
   346     0725                     l675:
   347                           
   348                           ;newmain.c: 45:   CCPR1L = x_motor;
   349     0725  0874               	movf	_x_motor,w
   350     0726  0095               	movwf	21	;volatile
   351                           
   352                           ;newmain.c: 46:   CCP1CON |= (1<<2)|(1<<3);
   353     0727  300C               	movlw	12
   354     0728  00F0               	movwf	??_main
   355     0729  0870               	movf	??_main,w
   356     072A  0497               	iorwf	23,f	;volatile
   357     072B                     l677:
   358                           
   359                           ;newmain.c: 47:   CCPR2L = y_motor;
   360     072B  0873               	movf	_y_motor,w
   361     072C  009B               	movwf	27	;volatile
   362     072D                     l679:
   363                           
   364                           ;newmain.c: 48:   CCP2CON |= (1<<2)|(1<<3);
   365     072D  300C               	movlw	12
   366     072E  00F0               	movwf	??_main
   367     072F  0870               	movf	??_main,w
   368     0730  049D               	iorwf	29,f	;volatile
   369     0731                     l681:
   370                           
   371                           ;newmain.c: 50:   ANSELH = 0b00000000;
   372     0731  1683               	bsf	3,5	;RP0=1, select bank3
   373     0732  1703               	bsf	3,6	;RP1=1, select bank3
   374     0733  0189               	clrf	9	;volatile
   375     0734                     l683:
   376                           
   377                           ;newmain.c: 52:   TRISB = 0b00001111;
   378     0734  300F               	movlw	15
   379     0735  1683               	bsf	3,5	;RP0=1, select bank1
   380     0736  1303               	bcf	3,6	;RP1=0, select bank1
   381     0737  0086               	movwf	6	;volatile
   382                           
   383                           ;newmain.c: 53:   PORTB = 0x00;
   384     0738  1283               	bcf	3,5	;RP0=0, select bank0
   385     0739  1303               	bcf	3,6	;RP1=0, select bank0
   386     073A  0186               	clrf	6	;volatile
   387     073B                     l685:
   388                           
   389                           ;newmain.c: 55:   _delay((unsigned long)((1000)*(4000000/4000.0)));
   390     073B  3006               	movlw	6
   391     073C  00F2               	movwf	??_main+2
   392     073D  3013               	movlw	19
   393     073E  00F1               	movwf	??_main+1
   394     073F  30AD               	movlw	173
   395     0740  00F0               	movwf	??_main
   396     0741                     u177:
   397     0741  0BF0               	decfsz	??_main,f
   398     0742  2F41               	goto	u177
   399     0743  0BF1               	decfsz	??_main+1,f
   400     0744  2F41               	goto	u177
   401     0745  0BF2               	decfsz	??_main+2,f
   402     0746  2F41               	goto	u177
   403     0747  2F48               	nop2
   404     0748                     l687:
   405                           
   406                           ;newmain.c: 57:   {;newmain.c: 59:     if (x_motor > max_deger || y_motor > max_deger) {
      +                           x_motor = max_deger; y_motor = max_deger;}
   407     0748  3097               	movlw	151
   408     0749  0274               	subwf	_x_motor,w
   409     074A  1803               	skipnc
   410     074B  2F4D               	goto	u11
   411     074C  2F4E               	goto	u10
   412     074D                     u11:
   413     074D  2F54               	goto	l691
   414     074E                     u10:
   415     074E                     l689:
   416     074E  3097               	movlw	151
   417     074F  0273               	subwf	_y_motor,w
   418     0750  1C03               	skipc
   419     0751  2F53               	goto	u21
   420     0752  2F54               	goto	u20
   421     0753                     u21:
   422     0753  2F59               	goto	l693
   423     0754                     u20:
   424     0754                     l691:
   425     0754  3096               	movlw	150
   426     0755  00F4               	movwf	_x_motor
   427     0756  3096               	movlw	150
   428     0757  00F3               	movwf	_y_motor
   429     0758  2F69               	goto	l699
   430     0759                     l693:
   431     0759  301E               	movlw	30
   432     075A  0274               	subwf	_x_motor,w
   433     075B  1C03               	skipc
   434     075C  2F5E               	goto	u31
   435     075D  2F5F               	goto	u30
   436     075E                     u31:
   437     075E  2F65               	goto	l697
   438     075F                     u30:
   439     075F                     l695:
   440     075F  301E               	movlw	30
   441     0760  0273               	subwf	_y_motor,w
   442     0761  1803               	skipnc
   443     0762  2F64               	goto	u41
   444     0763  2F65               	goto	u40
   445     0764                     u41:
   446     0764  2F69               	goto	l699
   447     0765                     u40:
   448     0765                     l697:
   449     0765  301E               	movlw	30
   450     0766  00F4               	movwf	_x_motor
   451     0767  301E               	movlw	30
   452     0768  00F3               	movwf	_y_motor
   453     0769                     l699:
   454                           
   455                           ;newmain.c: 62:    if (RB0 == 1 || RB1 == 1)
   456     0769  1283               	bcf	3,5	;RP0=0, select bank0
   457     076A  1303               	bcf	3,6	;RP1=0, select bank0
   458     076B  1806               	btfsc	6,0	;volatile
   459     076C  2F6E               	goto	u51
   460     076D  2F6F               	goto	u50
   461     076E                     u51:
   462     076E  2F82               	goto	l709
   463     076F                     u50:
   464     076F                     l701:
   465     076F  1C86               	btfss	6,1	;volatile
   466     0770  2F72               	goto	u61
   467     0771  2F73               	goto	u60
   468     0772                     u61:
   469     0772  2FA7               	goto	l51
   470     0773                     u60:
   471     0773  2F82               	goto	l709
   472     0774                     l703:
   473                           
   474                           ;newmain.c: 65:         {;newmain.c: 66:         CCPR1L = x_motor;
   475     0774  0874               	movf	_x_motor,w
   476     0775  0095               	movwf	21	;volatile
   477     0776                     l705:
   478                           
   479                           ;newmain.c: 67:         x_motor++;
   480     0776  3001               	movlw	1
   481     0777  00F0               	movwf	??_main
   482     0778  0870               	movf	??_main,w
   483     0779  07F4               	addwf	_x_motor,f
   484     077A                     l707:
   485                           
   486                           ;newmain.c: 68:         _delay((unsigned long)((30)*(4000000/4000.0)));
   487     077A  3027               	movlw	39
   488     077B  00F1               	movwf	??_main+1
   489     077C  30F5               	movlw	245
   490     077D  00F0               	movwf	??_main
   491     077E                     u187:
   492     077E  0BF0               	decfsz	??_main,f
   493     077F  2F7E               	goto	u187
   494     0780  0BF1               	decfsz	??_main+1,f
   495     0781  2F7E               	goto	u187
   496     0782                     l709:
   497                           
   498                           ;newmain.c: 64:         while (RB0 == 1 && x_motor < 150)
   499     0782  1283               	bcf	3,5	;RP0=0, select bank0
   500     0783  1303               	bcf	3,6	;RP1=0, select bank0
   501     0784  1C06               	btfss	6,0	;volatile
   502     0785  2F87               	goto	u71
   503     0786  2F88               	goto	u70
   504     0787                     u71:
   505     0787  2F9B               	goto	l719
   506     0788                     u70:
   507     0788                     l711:
   508     0788  3096               	movlw	150
   509     0789  0274               	subwf	_x_motor,w
   510     078A  1C03               	skipc
   511     078B  2F8D               	goto	u81
   512     078C  2F8E               	goto	u80
   513     078D                     u81:
   514     078D  2F74               	goto	l703
   515     078E                     u80:
   516     078E  2F9B               	goto	l719
   517     078F                     l713:
   518                           
   519                           ;newmain.c: 72:         {;newmain.c: 73:             CCPR1L = x_motor;
   520     078F  0874               	movf	_x_motor,w
   521     0790  0095               	movwf	21	;volatile
   522     0791                     l715:
   523                           
   524                           ;newmain.c: 74:              x_motor--;
   525     0791  3001               	movlw	1
   526     0792  02F4               	subwf	_x_motor,f
   527     0793                     l717:
   528                           
   529                           ;newmain.c: 75:             _delay((unsigned long)((30)*(4000000/4000.0)));
   530     0793  3027               	movlw	39
   531     0794  00F1               	movwf	??_main+1
   532     0795  30F5               	movlw	245
   533     0796  00F0               	movwf	??_main
   534     0797                     u197:
   535     0797  0BF0               	decfsz	??_main,f
   536     0798  2F97               	goto	u197
   537     0799  0BF1               	decfsz	??_main+1,f
   538     079A  2F97               	goto	u197
   539     079B                     l719:
   540                           
   541                           ;newmain.c: 71:         while (RB1 == 1 && x_motor > 30)
   542     079B  1283               	bcf	3,5	;RP0=0, select bank0
   543     079C  1303               	bcf	3,6	;RP1=0, select bank0
   544     079D  1C86               	btfss	6,1	;volatile
   545     079E  2FA0               	goto	u91
   546     079F  2FA1               	goto	u90
   547     07A0                     u91:
   548     07A0  2FA7               	goto	l51
   549     07A1                     u90:
   550     07A1                     l721:
   551     07A1  301F               	movlw	31
   552     07A2  0274               	subwf	_x_motor,w
   553     07A3  1803               	skipnc
   554     07A4  2FA6               	goto	u101
   555     07A5  2FA7               	goto	u100
   556     07A6                     u101:
   557     07A6  2F8F               	goto	l713
   558     07A7                     u100:
   559     07A7                     l51:	
   560                           ;newmain.c: 77:       }
   561                           
   562                           
   563                           ;newmain.c: 80:       if (RB2 == 1 || RB3 == 1)
   564     07A7  1906               	btfsc	6,2	;volatile
   565     07A8  2FAA               	goto	u111
   566     07A9  2FAB               	goto	u110
   567     07AA                     u111:
   568     07AA  2FBE               	goto	l731
   569     07AB                     u110:
   570     07AB                     l723:
   571     07AB  1D86               	btfss	6,3	;volatile
   572     07AC  2FAE               	goto	u121
   573     07AD  2FAF               	goto	u120
   574     07AE                     u121:
   575     07AE  2FE3               	goto	l745
   576     07AF                     u120:
   577     07AF  2FBE               	goto	l731
   578     07B0                     l725:
   579                           
   580                           ;newmain.c: 83:         {;newmain.c: 84:         CCPR2L = y_motor;
   581     07B0  0873               	movf	_y_motor,w
   582     07B1  009B               	movwf	27	;volatile
   583     07B2                     l727:
   584                           
   585                           ;newmain.c: 85:         y_motor++;
   586     07B2  3001               	movlw	1
   587     07B3  00F0               	movwf	??_main
   588     07B4  0870               	movf	??_main,w
   589     07B5  07F3               	addwf	_y_motor,f
   590     07B6                     l729:
   591                           
   592                           ;newmain.c: 86:         _delay((unsigned long)((30)*(4000000/4000.0)));
   593     07B6  3027               	movlw	39
   594     07B7  00F1               	movwf	??_main+1
   595     07B8  30F5               	movlw	245
   596     07B9  00F0               	movwf	??_main
   597     07BA                     u207:
   598     07BA  0BF0               	decfsz	??_main,f
   599     07BB  2FBA               	goto	u207
   600     07BC  0BF1               	decfsz	??_main+1,f
   601     07BD  2FBA               	goto	u207
   602     07BE                     l731:
   603                           
   604                           ;newmain.c: 82:         while (RB2 == 1 && y_motor < 150)
   605     07BE  1283               	bcf	3,5	;RP0=0, select bank0
   606     07BF  1303               	bcf	3,6	;RP1=0, select bank0
   607     07C0  1D06               	btfss	6,2	;volatile
   608     07C1  2FC3               	goto	u131
   609     07C2  2FC4               	goto	u130
   610     07C3                     u131:
   611     07C3  2FD7               	goto	l741
   612     07C4                     u130:
   613     07C4                     l733:
   614     07C4  3096               	movlw	150
   615     07C5  0273               	subwf	_y_motor,w
   616     07C6  1C03               	skipc
   617     07C7  2FC9               	goto	u141
   618     07C8  2FCA               	goto	u140
   619     07C9                     u141:
   620     07C9  2FB0               	goto	l725
   621     07CA                     u140:
   622     07CA  2FD7               	goto	l741
   623     07CB                     l735:
   624                           
   625                           ;newmain.c: 90:         {;newmain.c: 91:             CCPR2L = y_motor;
   626     07CB  0873               	movf	_y_motor,w
   627     07CC  009B               	movwf	27	;volatile
   628     07CD                     l737:
   629                           
   630                           ;newmain.c: 92:              y_motor--;
   631     07CD  3001               	movlw	1
   632     07CE  02F3               	subwf	_y_motor,f
   633     07CF                     l739:
   634                           
   635                           ;newmain.c: 93:             _delay((unsigned long)((30)*(4000000/4000.0)));
   636     07CF  3027               	movlw	39
   637     07D0  00F1               	movwf	??_main+1
   638     07D1  30F5               	movlw	245
   639     07D2  00F0               	movwf	??_main
   640     07D3                     u217:
   641     07D3  0BF0               	decfsz	??_main,f
   642     07D4  2FD3               	goto	u217
   643     07D5  0BF1               	decfsz	??_main+1,f
   644     07D6  2FD3               	goto	u217
   645     07D7                     l741:
   646                           
   647                           ;newmain.c: 89:         while (RB3 == 1 && y_motor > 30)
   648     07D7  1283               	bcf	3,5	;RP0=0, select bank0
   649     07D8  1303               	bcf	3,6	;RP1=0, select bank0
   650     07D9  1D86               	btfss	6,3	;volatile
   651     07DA  2FDC               	goto	u151
   652     07DB  2FDD               	goto	u150
   653     07DC                     u151:
   654     07DC  2FE3               	goto	l745
   655     07DD                     u150:
   656     07DD                     l743:
   657     07DD  301F               	movlw	31
   658     07DE  0273               	subwf	_y_motor,w
   659     07DF  1803               	skipnc
   660     07E0  2FE2               	goto	u161
   661     07E1  2FE3               	goto	u160
   662     07E2                     u161:
   663     07E2  2FCB               	goto	l735
   664     07E3                     u160:
   665     07E3                     l745:
   666                           
   667                           ;newmain.c: 97:     _delay((unsigned long)((50)*(4000000/4000.0)));
   668     07E3  3041               	movlw	65
   669     07E4  00F1               	movwf	??_main+1
   670     07E5  30EE               	movlw	238
   671     07E6  00F0               	movwf	??_main
   672     07E7                     u227:
   673     07E7  0BF0               	decfsz	??_main,f
   674     07E8  2FE7               	goto	u227
   675     07E9  0BF1               	decfsz	??_main+1,f
   676     07EA  2FE7               	goto	u227
   677     07EB  0000               	nop
   678     07EC  2F48               	goto	l687
   679     07ED  120A  118A  2800   	ljmp	start
   680     07F0                     __end_of_main:
   681     007E                     btemp	set	126	;btemp
   682     007E                     wtemp0	set	126
   683                           
   684                           	psect	idloc
   685                           
   686                           ;Config register IDLOC0 @ 0x2000
   687                           ;	unspecified, using default values
   688     2000                     	org	8192
   689     2000  3FFF               	dw	16383
   690                           
   691                           ;Config register IDLOC1 @ 0x2001
   692                           ;	unspecified, using default values
   693     2001                     	org	8193
   694     2001  3FFF               	dw	16383
   695                           
   696                           ;Config register IDLOC2 @ 0x2002
   697                           ;	unspecified, using default values
   698     2002                     	org	8194
   699     2002  3FFF               	dw	16383
   700                           
   701                           ;Config register IDLOC3 @ 0x2003
   702                           ;	unspecified, using default values
   703     2003                     	org	8195
   704     2003  3FFF               	dw	16383
   705                           
   706                           	psect	config
   707                           
   708                           ;Config register CONFIG1 @ 0x2007
   709                           ;	Oscillator Selection bits
   710                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
   711                           ;	Watchdog Timer Enable bit
   712                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   713                           ;	Power-up Timer Enable bit
   714                           ;	PWRTE = OFF, PWRT disabled
   715                           ;	RE3/MCLR pin function select bit
   716                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
   717                           ;	Code Protection bit
   718                           ;	CP = OFF, Program memory code protection is disabled
   719                           ;	Data Code Protection bit
   720                           ;	CPD = OFF, Data memory code protection is disabled
   721                           ;	Brown Out Reset Selection bits
   722                           ;	BOREN = OFF, BOR disabled
   723                           ;	Internal External Switchover bit
   724                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   725                           ;	Fail-Safe Clock Monitor Enabled bit
   726                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   727                           ;	Low Voltage Programming Enable bit
   728                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   729                           ;	In-Circuit Debugger Mode bit
   730                           ;	DEBUG = 0x1, unprogrammed default
   731     2007                     	org	8199
   732     2007  20F1               	dw	8433
   733                           
   734                           ;Config register CONFIG2 @ 0x2008
   735                           ;	Brown-out Reset Selection bit
   736                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   737                           ;	Flash Program Memory Self Write Enable bits
   738                           ;	WRT = OFF, Write protection off
   739     2008                     	org	8200
   740     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    2
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      3       5       1       35.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       5      12        0.0%
ABS                  0      0       5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 02 16:44:41 2023

                      pc 0002                       l51 07A7                       u10 074E  
                     u11 074D                       u20 0754                       u21 0753  
                     u30 075F                       u31 075E                       u40 0765  
                     u41 0764                       u50 076F                       u51 076E  
                     u60 0773                       u61 0772                       u70 0788  
                     u71 0787                       u80 078E                       u81 078D  
                     u90 07A1                       u91 07A0                       fsr 0004  
                    l701 076F                      l711 0788                      l703 0774  
                    l721 07A1                      l713 078F                      l705 0776  
                    l723 07AB                      l731 07BE                      l715 0791  
                    l707 077A                      l733 07C4                      l741 07D7  
                    l725 07B0                      l717 0793                      l709 0782  
                    l743 07DD                      l735 07CB                      l727 07B2  
                    l719 079B                      l671 0719                      l737 07CD  
                    l729 07B6                      l745 07E3                      l681 0731  
                    l673 071F                      l739 07CF                      l691 0754  
                    l683 0734                      l675 0725                      l693 0759  
                    l685 073B                      l677 072B                      l695 075F  
                    l687 0748                      l679 072D                      l697 0765  
                    l689 074E                      l699 0769                      _RB0 0030  
                    _RB1 0031                      _RB2 0032                      _RB3 0033  
                    u100 07A7                      u101 07A6                      u110 07AB  
                    u111 07AA                      u120 07AF                      u121 07AE  
                    u130 07C4                      u131 07C3                      u140 07CA  
                    u141 07C9                      u150 07DD                      u151 07DC  
                    u207 07BA                      u160 07E3                      u161 07E2  
                    u217 07D3                      u227 07E7                      _PR2 0092  
                    u177 0741                      u187 077E                      u197 0797  
                   _main 0719                     btemp 007E                     start 0000  
                  ?_main 0070                    _T2CON 0012                    _PORTB 0006  
                  _TRISB 0086                    _TRISC 0087                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07F0  
           __end_of_main 07F0                   ??_main 0070                   _CCPR1L 0015  
                 _CCPR2L 001B                   _ANSELH 0189             __pdataCOMMON 0073  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 0719  
                _CCP1CON 0017                  _CCP2CON 001D               __stringtab 0003  
      __end_of_max_deger 000B        __end_of_min_deger 000A                  _x_motor 0074  
                _y_motor 0073     end_of_initialization 07FC            __pidataCOMMON 0717  
    start_initialization 07F0                ___latbits 0002                __pstrings 0003  
              _max_deger 000A                _min_deger 0009              __stringbase 0008  
     __end_of__stringtab 0009                stringcode 0003                 stringdir 0003  
               stringtab 0003  
